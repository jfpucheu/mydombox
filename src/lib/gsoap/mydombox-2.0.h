// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* mydombox-2.0.h
   Generated by wsdl2h 2.8.15 from mydombox-2.0.wsdl and /usr/local/share/gsoap/WS/typemap.dat
   2013-07-28 20:16:53 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on mydombox-2.0.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt cw

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://mydombox.com/mydombox/                                            *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

<---------- Mydombox Webservices ---------->

Version: 1.0 (28/06/2013)

Methodes : 
	-getLightingStatus
	-setLightingStatus

Version: 2.0 (28/07/2013)

Methodes : 
	-initDevice


Author: Jean-Fran√ßois PUCHEU 
@: jfpucheu@gmail.com

------------------------------------------------

*/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://mydombox.com/mydombox/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://mydombox.com/mydombox/"
//gsoap ns1   schema namespace:	http://mydombox.com/mydombox/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://mydombox.com/mydombox/                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://mydombox.com/mydombox/                                            *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://mydombox.com/mydombox/":getLightingStatus

/// "http://mydombox.com/mydombox/":getLightingStatus is a complexType.
struct _ns1__getLightingStatus
{
/// Element DeviceID of type xs:int.
    int                                  DeviceID                       1;	///< Required element.
};


/// Top-level root element "http://mydombox.com/mydombox/":getLightingStatusResponse

/// "http://mydombox.com/mydombox/":getLightingStatusResponse is a complexType.
struct _ns1__getLightingStatusResponse
{
/// Element DeviceID of type xs:int.
    int                                  DeviceID                       1;	///< Required element.
/// Element State of type xs:string.
    char*                                State                          1;	///< Required element.
/// Element Dim of type xs:int.
    int*                                 Dim                            0;	///< Optional element.
};


/// Top-level root element "http://mydombox.com/mydombox/":setLightingStatus

/// "http://mydombox.com/mydombox/":setLightingStatus is a complexType.
struct _ns1__setLightingStatus
{
/// Element DeviceID of type xs:int.
    int                                  DeviceID                       1;	///< Required element.
/// Element State of type xs:string.
    char*                                State                          1;	///< Required element.
/// Element Dim of type xs:int.
    int*                                 Dim                            0;	///< Optional element.
};


/// Top-level root element "http://mydombox.com/mydombox/":setLightingStatusResponse

/// "http://mydombox.com/mydombox/":setLightingStatusResponse is a complexType.
struct _ns1__setLightingStatusResponse
{
/// Element DeviceID of type xs:int.
    int                                  DeviceID                       1;	///< Required element.
/// Element State of type xs:string.
    char*                                State                          1;	///< Required element.
/// Element Dim of type xs:int.
    int*                                 Dim                            0;	///< Optional element.
};


/// Top-level root element "http://mydombox.com/mydombox/":initDevice

/// "http://mydombox.com/mydombox/":initDevice is a complexType.
struct _ns1__initDevice
{
/// Element DeviceID of type xs:int.
    int                                  DeviceID                       1;	///< Required element.
/// Element Order of type xs:string.
    char*                                Order                          1;	///< Required element.
};


/// Top-level root element "http://mydombox.com/mydombox/":initDeviceResponse

/// "http://mydombox.com/mydombox/":initDeviceResponse is a complexType.
struct _ns1__initDeviceResponse
{
/// Element DeviceID of type xs:int.
    int                                  DeviceID                       1;	///< Required element.
/// Element Order of type xs:string.
    char*                                Order                          1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://mydombox.com/mydombox/                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://mydombox.com/mydombox/                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	mydombox 
//gsoap ns1  service type:	mydombox 
//gsoap ns1  service port:	http://localhost:8888/ 
//gsoap ns1  service namespace:	http://mydombox.com/mydombox/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage mydombox Definitions

@section mydombox_documentation Documentation
<---------- Mydombox Webservices ---------->

Version: 1.0 (28/06/2013)

Methodes : 
	-getLightingStatus
	-setLightingStatus

Version: 2.0 (28/07/2013)

Methodes : 
	-initDevice


Author: Jean-Fran√ßois PUCHEU 
@: jfpucheu@gmail.com

------------------------------------------------


@section mydombox_bindings Service Bindings

  - @ref mydombox

@section mydombox_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page mydombox Binding "mydombox"

@section mydombox_operations Operations of Binding  "mydombox"

  - @ref __ns1__getLightingStatus

  - @ref __ns1__setLightingStatus

  - @ref __ns1__initDevice

@section mydombox_ports Endpoints of Binding  "mydombox"

  - http://localhost:8888/

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   mydombox                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getLightingStatus                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getLightingStatus" of service binding "mydombox"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://mydombox.com/mydombox/getLightingStatus"

  - Addressing input action: "http://mydombox.com/mydombox/getLightingStatus"

  - Addressing output action: "http://mydombox.com/mydombox/getLightingStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getLightingStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns1__getLightingStatus*     ns1__getLightingStatus,
    // output parameters:
    struct _ns1__getLightingStatusResponse* ns1__getLightingStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getLightingStatus(
    struct soap *soap,
    // input parameters:
    struct _ns1__getLightingStatus*     ns1__getLightingStatus,
    // output parameters:
    struct _ns1__getLightingStatusResponse* ns1__getLightingStatusResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	getLightingStatus SOAP
//gsoap ns1  service method-style:	getLightingStatus document
//gsoap ns1  service method-encoding:	getLightingStatus literal
//gsoap ns1  service method-input-action:	getLightingStatus http://mydombox.com/mydombox/getLightingStatus
//gsoap ns1  service method-output-action:	getLightingStatus http://mydombox.com/mydombox/getLightingStatusResponse
int __ns1__getLightingStatus(
    struct _ns1__getLightingStatus*     ns1__getLightingStatus,	///< Input parameter
    struct _ns1__getLightingStatusResponse* ns1__getLightingStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setLightingStatus                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__setLightingStatus" of service binding "mydombox"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://mydombox.com/mydombox/setLightingStatus"

  - Addressing input action: "http://mydombox.com/mydombox/setLightingStatus"

  - Addressing output action: "http://mydombox.com/mydombox/setLightingStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setLightingStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns1__setLightingStatus*     ns1__setLightingStatus,
    // output parameters:
    struct _ns1__setLightingStatusResponse* ns1__setLightingStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setLightingStatus(
    struct soap *soap,
    // input parameters:
    struct _ns1__setLightingStatus*     ns1__setLightingStatus,
    // output parameters:
    struct _ns1__setLightingStatusResponse* ns1__setLightingStatusResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	setLightingStatus SOAP
//gsoap ns1  service method-style:	setLightingStatus document
//gsoap ns1  service method-encoding:	setLightingStatus literal
//gsoap ns1  service method-input-action:	setLightingStatus http://mydombox.com/mydombox/setLightingStatus
//gsoap ns1  service method-output-action:	setLightingStatus http://mydombox.com/mydombox/setLightingStatusResponse
int __ns1__setLightingStatus(
    struct _ns1__setLightingStatus*     ns1__setLightingStatus,	///< Input parameter
    struct _ns1__setLightingStatusResponse* ns1__setLightingStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__initDevice                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__initDevice" of service binding "mydombox"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://mydombox.com/mydombox/initDevice"

  - Addressing input action: "http://mydombox.com/mydombox/initDevice"

  - Addressing output action: "http://mydombox.com/mydombox/initDeviceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__initDevice(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns1__initDevice*            ns1__initDevice,
    // output parameters:
    struct _ns1__initDeviceResponse*    ns1__initDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__initDevice(
    struct soap *soap,
    // input parameters:
    struct _ns1__initDevice*            ns1__initDevice,
    // output parameters:
    struct _ns1__initDeviceResponse*    ns1__initDeviceResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	initDevice SOAP
//gsoap ns1  service method-style:	initDevice document
//gsoap ns1  service method-encoding:	initDevice literal
//gsoap ns1  service method-input-action:	initDevice http://mydombox.com/mydombox/initDevice
//gsoap ns1  service method-output-action:	initDevice http://mydombox.com/mydombox/initDeviceResponse
int __ns1__initDevice(
    struct _ns1__initDevice*            ns1__initDevice,	///< Input parameter
    struct _ns1__initDeviceResponse*    ns1__initDeviceResponse	///< Output parameter
);

/**

@page mydombox Binding "mydombox"

@section mydombox_policy_enablers Policy Enablers of Binding  "mydombox"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://mydombox.com/mydombox/"

  - <ns1:getLightingStatus> @ref _ns1__getLightingStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getLightingStatus(struct soap*, struct _ns1__getLightingStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getLightingStatus(struct soap*, struct _ns1__getLightingStatus*);
    @endcode

  - <ns1:getLightingStatusResponse> @ref _ns1__getLightingStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getLightingStatusResponse(struct soap*, struct _ns1__getLightingStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getLightingStatusResponse(struct soap*, struct _ns1__getLightingStatusResponse*);
    @endcode

  - <ns1:setLightingStatus> @ref _ns1__setLightingStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__setLightingStatus(struct soap*, struct _ns1__setLightingStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__setLightingStatus(struct soap*, struct _ns1__setLightingStatus*);
    @endcode

  - <ns1:setLightingStatusResponse> @ref _ns1__setLightingStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__setLightingStatusResponse(struct soap*, struct _ns1__setLightingStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__setLightingStatusResponse(struct soap*, struct _ns1__setLightingStatusResponse*);
    @endcode

  - <ns1:initDevice> @ref _ns1__initDevice
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__initDevice(struct soap*, struct _ns1__initDevice*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__initDevice(struct soap*, struct _ns1__initDevice*);
    @endcode

  - <ns1:initDeviceResponse> @ref _ns1__initDeviceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__initDeviceResponse(struct soap*, struct _ns1__initDeviceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__initDeviceResponse(struct soap*, struct _ns1__initDeviceResponse*);
    @endcode

*/

/* End of mydombox-2.0.h */
